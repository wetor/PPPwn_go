name: release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { target: x86_64-linux-musl,  os: ubuntu-latest, upx: "upx --lzma",
              goos: "linux", goarch: "amd64", release_ext: ".tar.gz" }
          - { target: aarch64-linux-musl, os: ubuntu-latest, upx: "upx --lzma",
              goos: "linux", goarch: "arm64", release_ext: ".tar.gz" }
          - { target: arm-linux-musleabi, os: ubuntu-latest, upx: "upx --lzma",
              goos: "linux", goarch: "arm", release_ext: ".tar.gz"  }
    steps:
      - uses: actions/checkout@v4

      - name: Install UPX
        if: matrix.os == 'ubuntu-latest'
        uses: crazy-max/ghaction-upx@v3
        with:
          install-only: true

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.20'

      - uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.12.0

      - name: Install Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install llvm --no-install-recommends

      - name: Build libpcap
        run: |
          cd ~
          export ZIG=`which zig`
          wget https://www.tcpdump.org/release/libpcap-1.10.4.tar.gz
          tar -xf libpcap-1.10.4.tar.gz && cd libpcap-1.10.4
          ./configure  --host=${{ matrix.target }} CC="$ZIG cc -target ${{ matrix.target }}" CXX="$ZIG c++ -target ${{ matrix.target }}" AR="$ZIG ar" RANLIB="$ZIG ranlib"
          make && sudo make install

      - name: Set env
        run: |
          cd $GITHUB_WORKSPACE
          echo $'#!/bin/sh \n zig cc -target ${{ matrix.target }} $@' >> zcc
          sudo chmod +x zcc
          echo $'#!/bin/sh \n zig c++ -target ${{ matrix.target }} $@' >> zxx
          sudo chmod +x zxx
          echo $'#!/bin/sh \n zig ar $@' >> zar
          sudo chmod +x zar

      - name: Get commit and version info
        id: info
        run: |
          VERSION=$(git describe --tags --always)
          COMMIT_HASH=$(git rev-parse --short HEAD)
          DATE=$(date +'%Y%m%d%H%M%S')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
          echo "DATE=$DATE" >> $GITHUB_ENV

      - name: Build executable
        run: |
          cd $GITHUB_WORKSPACE
          export PATH=$PATH:$GITHUB_WORKSPACE
          export CGO_ENABLED=1
          export CC="zcc"
          export CXX="zxx"
          export AR="zar"
          export CGO_CFLAGS="-I/usr/local/include/pcap -I/usr/local/include"
          export CGO_LDFLAGS="-L/usr/local/lib -Wl,-static"
          export GOOS=${{ matrix.goos }}
          export GOARCH=${{ matrix.goarch }}
          
          TAG=$(git describe --tags --abbrev=0)
          go build -trimpath -ldflags="-s -w -X 'github.com/wetor/PPPwn_go/cmd/common.version=${{ env.VERSION }}' -X 'github.com/wetor/PPPwn_go/cmd/common.buildTime=${{ env.DATE }}'" -o build/PPPwn${{ matrix.ext }} cmd/*.go
          ${{ matrix.upx }} build/PPPwn${{ matrix.ext }}

      - name: pack
        run: |
          cd build && tar -czvf PPPwn_${{ matrix.goos }}_${{ matrix.goarch }}${{ matrix.release_ext }} PPPwn${{ matrix.ext }}

      - uses: ncipollo/release-action@v1
        with:
          artifacts: "build/PPPwn_${{ matrix.goos }}_${{ matrix.goarch }}${{ matrix.release_ext }}"
          bodyFile: ""
          allowUpdates: true
          token: ${{secrets.GITHUB_TOKEN}}
