package main

import (
	"fmt"
	"github.com/stretchr/testify/assert"
	"os"
	"testing"
)

func readFile(file string) []byte {
	d, _ := os.ReadFile(file)
	return d
}

//        self.pppoe_softc = 0x100
//        self.kaslr_offset = 0x200
//        # self.s = conf.L2socket(iface=self.iface, filter=self.BPF_FILTER)
//    f1d = exploit.build_fake_ifnet()
//    print(len(f1d), f1d)
//    f2d = exploit.build_overflow_lle()
//    print(len(f2d), f2d)
//    f3d = exploit.build_fake_lle()
//    print(len(f3d), f3d)
//    f1 = open('../PPPwn_go/testdata/fake_ifnet.bin', 'wb')
//    f1.write(f1d)
//    f1.close()
//    f2 = open('../PPPwn_go/testdata/overflow_lle.bin', 'wb')
//    f2.write(f2d)
//    f2.close()
//    f3 = open('../PPPwn_go/testdata/fake_lle.bin', 'wb')
//    f3.write(f3d)
//    f3.close()
//    # python pppwn.py --interface=enp0s3 --fw=950

func TestExploit_BuildFakeIfnet(t *testing.T) {
	e := NewExploit(FirmwareOffsets["950"], "net", []byte("stage1"), []byte("stage2"))
	fakeIfnet := e.BuildFakeIfnet()
	assert.Equal(t, readFile("testdata/fake_ifnet.bin"), fakeIfnet)
	fmt.Println(len(fakeIfnet), fakeIfnet)
	overflowLle := e.BuildOverflowLle()
	assert.Equal(t, readFile("testdata/overflow_lle.bin"), overflowLle)
	fmt.Println(len(overflowLle), overflowLle)
	fakeLle := e.BuildFakeLle()
	assert.Equal(t, readFile("testdata/fake_lle.bin"), fakeLle)
	fmt.Println(len(fakeLle), fakeLle)

}
