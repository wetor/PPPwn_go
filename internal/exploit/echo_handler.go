package exploit

import (
	"context"

	"github.com/google/gopacket"
	"github.com/google/gopacket/layers"

	"github.com/wetor/PPPwn_go/internal/lcp"
	"github.com/wetor/PPPwn_go/internal/logger"
	"github.com/wetor/PPPwn_go/internal/packet"
	"github.com/wetor/PPPwn_go/internal/pppoe"
)

func LcpEchoHandler(ctx context.Context, iface string) {
	var err error
	p := packet.NewPacket(iface, "pppoes && !ip")

	go func() {
		for {
			eth, pppoePkt, _, pkt, _ := p.ReceiveEthPPPoELCP(ctx, lcp.ProtoLCP, lcp.CodeEchoRequest)

			err = p.Send(&packet.SendParams{
				FixLengths:       true,
				ComputeChecksums: false,
				Layers: []gopacket.SerializableLayer{
					&layers.Ethernet{
						SrcMAC:       eth.DstMAC,
						DstMAC:       eth.SrcMAC,
						EthernetType: layers.EthernetTypePPPoESession,
					},
					&pppoe.Pkt{
						SessionID: pppoePkt.SessionID,
					},
					&layers.PPP{
						PPPType: lcp.ProtoLCP,
					},
					&lcp.Pkt{
						Proto: lcp.ProtoLCP,
						Code:  lcp.CodeEchoReply,
						ID:    pkt.ID,
					},
				},
			})
			if err != nil {
				logger.Error(err)
			}
		}
	}()
}
