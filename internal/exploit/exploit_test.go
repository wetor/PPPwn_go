package exploit

import (
	"encoding/hex"
	"fmt"
	"testing"
	"time"

	"github.com/wetor/PPPwn_go/internal/config"
	"github.com/wetor/PPPwn_go/internal/logger"
)

func TestExploit_BuildFakeIfnet(t *testing.T) {
	for i := 0; i < PIN_NUM/0x10; i++ {
		if i%0x10 == 0 {
			logger.Infof("[*] Pinning to CPU 0...%d%%\r", int(float32(i)/float32(PIN_NUM/0x10)*100))
		}
		time.Sleep(time.Millisecond)
	}

}

func TestExploit_Run(t *testing.T) {
	e := NewExploit(&Option{
		Interface: "\\Device\\NPF_{D1D879E5-534F-4CAA-A2EE-B6DF33437A09}",
		Inject: &config.Inject{
			TargetMAC:  "c8:63:f1:82:20:c7",
			Firmware:   "950",
			Stage1File: "../../testdata/stage1/stage1.bin",
			Stage2File: "../../testdata/stage2/stage2.bin",
		},
	})
	e.Run()

}

func TestExploit_calc(t *testing.T) {
	pppoe_softc_list := uint64(0xffffffffdd3480a8)
	offset := uint64(0xffffffff8434c0a8)
	kaslr_offset := pppoe_softc_list - offset
	fmt.Println(kaslr_offset)
	fmt.Println(pppoe_softc_list & 0xffffffff00000fff)
	fmt.Println(offset & 0xffffffff00000fff)

}

func TestDump(t *testing.T) {
	data := []byte{0xff, 0xff, 0xfd, 0x80, 0x00}
	fmt.Println(hex.EncodeToString(data))

}
